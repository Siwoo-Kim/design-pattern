SOLID
    Single Responsibility Principle (SRP)
        - A single class should have just a single reason to change.
        - A single class should have one primary responsibility.
    Open-Closed Principle (OCP) + Specification
        - Open for extension but closed for modification. 확장에는 열려 있고 코드 변경에선 닫혀 있음.












디자인 패턴.

디자인 원칙.
    디자인 원칙 1. 어플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시킨다.
        - 바뀌는 부분은 따로 뽑아내서 캡슐화시킨다. 그렇게 하면 바뀌지 않은 부분에는 영향을 미치지 않은채, 바뀐 부분만 고치거나 확장할 수 있다.
        오리가 수영하는 방법은 바뀌지 않는다. <- 바뀌는 부분이 캡슐화 되어 변경될땐, 이 부분엔 영향이 가지 않는다.
        특정 오리는 날 수 있지만, 또 다른 오리는 날 수 없다. <- 캡슐화한다.
        오리마다 내는 소리가 다르다. <- 캡슐화한다.

    상속.
        장점
            - 상속은 코드를 재사용할 수 있게 해준다.
            - 다형성
        단점
            - 코드를 재정비하기 어렵다.
            - 슈퍼 클래스의 코드가 변경되었을 때, 하위 클래스에 원치 않은 영향을 끼칠 수 있다.

    인터페이스 구현.
        장점
            - 상속과 더불어 활용하면, 하나의 슈퍼 클래스에서 파생된 서브 클래스에 다른 행동을 구현하도록 강요할 수 있다. (다중 상속)
                public class RubberDuck extends AbstractDuck implements Flyable, Quackable
        단점
            - 구현된 코드가 전혀 들어가지 않기 때문에 코드 재사용을 할 수 없다.
            - 특정 행동을 바꿀 때마다 모든 서브클래스를 전부 찾아서 코드를 일일이 고쳐야 하므로, 버그가 발생된 가능성이 생긴다.

    디자인 원칙 2. 구현이 아닌 인터페이스 맞춰서 프로그래밍한다.
        - 바뀌는 부분을 인터페이스로 표현하고, 구현할 때 인터페이스를 구현하도록 한다. (런타임시 동적으로 행동을 부여할 수 있다.:다형성)
        - 여기서 인터페이스란 상위 형식(supertype) 을 의미한다. 상위 형식이란 인터페이스 나 추상 클래스를 의미한다.
        - 상위 형식에 맞춰서 프로그래밍하라는 상위 형식에 맞춰서 다형성을 활용하라와 같은 의미이다.
        다형성
            - 변수를 선언할 때 추상 클래스나 인터페이스로 타입을 지정하고, 변수에 대입할 때 특정 구현된 형식을 런타임에 부여한다.
            - 변수를 선언하는 클라이언트에서는 실제 객체의 형식을 몰라도 된다.
            Animal animal = new Dog();
            animal.sound();
            animal = getAnimal("cat"); // new 연산자 대신, 구체적인 객체의 생성방법을 캡슐화(FactoryPattern) 하면 코드의 유연성이 더 향상된다.
            animal.sound();

    Strategy Pattern.
        - strategy pattern 에서는 알고리즘군을 정의하고 각각을 캡슐화해서 교환할 수 있게 만든다.
        스트레티지을 활용하면 알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 변경할 수 있다. (상속시에 특정 알고리즘을 변경할 시, 어떤 문제가 생겼는지 생각하고 비교해보자)
        특정 달라지는 부분을 family of algorithms 이라 부른다.
        특정 달라지지 않는 부분을 context 라 하며, 상위 클래스로 추상화하여 뽑아 낸다.
        달라지는 부분은 인터페이스로 뽑아낸다.(상위 형식에 맞춰 프로그래밍 한다.)
        달라지는 부분을 구현한 클래스를 설계한다.
        context 에서 위에서 생성한 인터페이스의 레퍼런스를 선언하고, 행동을 위임한다. (구성: composition)
    디자인 원칙 3. 상속보다는 구성을 활용한다.
        구성을 이용하면 시스템의 유연성을 크게 향상시킬 수 있으며, family of algorithms 을 클래스 집합으로 캡슐화 시켜주며
        구성요소로 사용하는 객체(클라이언트, 혹은 의존 객체) 실행시에 행동을 바꿀 수 있다.

    디자인 원칙 4. 정말 친한 친구하고만 얘기하라.
        어떤 객체든 그 객체와 상호작용을 하는 클래스의 개수를 주의하라.
        * 친구는 만들지 않으면서 다른 객체에 영향력을 행사하는 방법.
            친구의 친구와 얘기하기 위해선 친구의 "메서드"를 이용하여 전달하라.
            클래스내에서 메소드 호출시,
                1. 객체 자체.
                2. 메소드에 매개변수로 전달된 객체.
                3. 메서드에서 생성된 로컬 변수.
                4. 객체에 속하는 구성요소.
            원칙을 따르는 경우 ex.
                public float getTemp() {
                    Thermometer thermometer = station.getThermometer(); // 친구의 친구 객체에 접근한다(x)
                    return thermometer.getTemperature(); // 친구의 친구의 친구 객체에 접근한다(x)
                }

                public float getTemp() {
                    return station.getTemperature();
                }

    디자인 원칙 5. 헐리우드 원칙: 먼저 연락하지 마. 내가 연락할게.
        저수준 구성요소는 고수준 구성 요소를 직접 호출할 수 없다. 저수준 구성요소를 언제 어떻게 쓰일지는 고수준 구성 요소에 의해 결정된다.
            템플릿 메서드와 헐리우드 원칙.
                알고리즘의 틀(template method) 을 지닌 추상 클래스가 서브 클래스의 알고리즘을 언제 호출할지 결정한다.
                추상 클래스의 메서드를 서브 클래스에서 사용할 일은 빈번하다. 하지만 순환 의존성이 생기는 것은 피하라.

    디자인 원칙 6. 클래스를 바꾸는 이유는 한 가지 뿐이어야 한다.
        응집도(cohesion) : 한 클래스 또는 모듈이 특정 목적 또는 역할을 얼마나 "일관되게" 지원하는지를 나타내는 척도.
        응집도가 높다는 것은 "일련의 서로 연관된 기능"이 묶여있다는 것이고, 응집도가 낮다는 것은 서로 상관 없는 기능들이 묶여있다는 것을 뜻한다.

옵저버 패턴
    시작하기 전:
        구체적인 구현을 바탕으로 프로그래밍 하지 말아라 - (인터페이스 맞춰서 프로그래밍하라.)
        공통적인 인터페이스를 구현하여 사용하라
        달라지는 부분을 캡슐화하여라.
    - 옵저버 패턴에서는 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱싱되는
    방식으로 일대다 의존성을 정의한다. (주제:One - 구독자:Many)

    주제 (Subject 혹은 Observable) 와 구독자 (Observer) 로 이루어졌다.
        - 주제 객체에서는 데이터를 관리한다.
        - 주제 객체의 데이터가 달라지면 구독자 (Observer) 에게 전달된다.
        - 구독자 (Observer) 은 주제 객체를 구독하며, 주제 객체의 데이터가 바뀌면 갱신 내용을 전달 받는다.

    디자인 원칙 4. 서로 상호작용하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용하라.
        느슨한 결합(Loose Coupling).
            두 객체가 느슨하게 결하되어 있다는 것은, 둘이 상호작용할때 인터페이스를 통해 대화한다는 것이다. (구현 클래스를 알지 못한다)
            - 얼마든지 의존 구현 클래스를 교체할 수 있다.
            - 둘 중 하나가 바뀌더라도 서로한테 영향을 미치지 않는다.
            - 다른 용도로 독립적으로 재사용할 수 있다.

    자바 내장 옵저버 패턴.
        Observable 클래스(Subject)와 Observer 인터페이스(구독자)

        객체가 Observer 가 되는 방법.
            java.util.Observer 을 구현하고 Observable 객체의 addObserver 메서드를 호출.
        주제(Observable) 에서 연락을 돌리는 방법.
            java.util.Observable 를 확장하고 setChanged() 메서드를 호출하여 객체의 상태가 바뀌는 것을 알림.
            이후 notifyObservers(Object arg) 를 호출.
        Observer 가 연락을 받는 방법.
            update(Observable o, Object arg) 메서드를 구현. (Push 방식)

    Swing 의 옵저버 패턴.
        스윙의 구성 요소는 Subject 역할을 담당 (데이터를 지닌 객체).
        Listener 로 postfix 끝나는 클래스는 Observer 역할을 담당 (구독하는 객체).
            ex) JButton.addActionListener(new SomeListener()); - Observer 를 등록 시킨다.
            SomeListener.actionPerformed(ActionEvent event); - 데이터가 변경되어 알림이 발동된다 ( = Observer.update() )

    옵저버 패턴시 주의점.
        연락이 가는 순서에 의존하지 마라.


데코레이터 패턴.
    * 객체에 추가적인 요건을 동적으로 첨가한다. 데코레이터는 서브 클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다. (동적으로 상속)
    상속보단 구성을 사용하자: 상속으로 부모 클래스의 행동을 물려받으면, 그 행동은 컴파일시에 완전히 결정된다.
    하지만 구성과 위임을 통해 객체의 행동을 확장하면 실행중에 동적으로 행동을 결정할 수 있다.
    디자인 원칙 5. OCP(Open-Closed Principle)
        - 클래스는 확장에 대해서는 열려 있지만 코드 변경에 대해서는 닫혀 있어야 한다. (OCP 을 떠올릴때, 상속과 구성, 위임의 차이를 기억하자)

    데코레이터 객체.
        - 데코레이터의 수퍼클래스는 자신이 장식하고 있는 객체의 슈퍼클래스와 같다.
        - 한 객체를 여러 개의 데코레이터 객체로 감쌀 수 있다.
        - 데코레이터는 타겟 객체와 같은 수퍼클래스를 가지고 있기 때문에 변수 레퍼런스에 대신 할당될 수 있다.
        - 데코레이터는 타겟 객체에 어떤 행동을 위임하는 것 외에 원하는 추가적인 작업을 수행할 수 있다.
        - 타겟 객체를 언제든지 감쌀 수 있기에 실행시에 동적으로 추가 기능을 추가할 수 있다. (런타임시 확장)

팩토리 패턴.
    new 연산자의 문제점.
        - new 연산자를 사용한다는 것은 특정 구상 클래스의 Instance 를 생성하므로 특정 구현에 의존함을 의미한다.
        구상 클래스(Concrete Class) 를 바탕으로의 프로그래밍?
            - 코드를 수정해야 할 가능성이 높아지고, 유연성이 떨어진다.
            - 추상 클래스(Interface) 에 맞춰서 프로그래밍 하라.

    Simple Factory?
        - 객체 생성 부분만 캡슐화하여 Factory class 에 정의한다. Simple Factory 은 팩토리 패턴이 아니다.
    팩토리 패턴의 두가지?
        - Factory Method Pattern, Factory Pattern.

    Factory Method Pattern.
        - 팩토리 메서드 패턴에서는 객체를 생성하기 위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.
        팩토리 메서리 패턴에선 클래스의 인스턴스를 만드는 일을 서브클래스에 위임한다. (*)


        public abstract class Factory {

            public void doSomething(String arg) {
                Product p = factoryMethod(arg);
                //Factory 은 p 가 어떤 instance 인지 알지 못한다.
                //추상 클래스에 의존하여 프로그래밍한다.
                p.doWork();
            }

            //Factory Method. 팩토리 역할을 하는 메서드.
            protected abstract Product factoryMethod(String arg);
        }

        public static void main(...) {
            Factory f = new ConcreteFactoryOne();
            f.doSomething("Arg");
        }

싱글턴 패턴.
    - 싱글턴 패턴은 해당 클래스의 instance 가 하나만 만들어지고, 어디서든지 그 인스턴스에 접근할 수 있게한 패턴.
    - 클래스에서 단 하나뿐인 인스턴스를 관리하도록 한다. (다른 클래스에서 인스턴스를 추가하지 못하도록 한다)
    - Lazy instantiation 기법을 사용하면 리소스를 절약할 수 있다.

    싱글턴 패턴의 활용? (객체 instance 가 하나만 필요한 상황)
        ex) Thread Pool, Logger Class, Configuration Class, Accessing resources in shared mode.
        - 레지스트리 설정이 담겨있는 객체인 경우, 객체가 여러 개 있다면, 다른 설정 내역들이 여러개 생기고 혼란을 야기시킨다.
        이런 경우, Singleton 패턴을 사용하면 한 어플에서 어떤 객체도 똑같은 자원을 활용할 수 있다.

    싱글턴 패턴 생성하기.
        - Singleton 의 생성자는 private 으로 지정한다.
        - instance 을 요청할 땐, 정적 메서드 getInstance() 을 사용한다.

        public class Singleton {
            private static Singleton instance;

            private Singleton() {}

            public static Singleton getInstance() {
                //lazy instantiation
                if (instance == null)
                    instance = new Singleton();
                return instance;
            }
        }

    싱글턴 패턴의 문제점. (다중 쓰레드시 다중 인스턴스 생성.)
        public class ChocolateBoiler {
            private boolean empty;
            private boolean boiled;
            private static ChocolateBoiler instance;

            public static void main(String[] args) {
                Runnable r1 = () -> {
                    ChocolateBoiler instance = ChocolateBoiler.getInstance();
                    System.out.println("hash 1: " + instance.hashCode());
                };

                Runnable r2 = () -> {
                    ChocolateBoiler instance = ChocolateBoiler.getInstance();
                    System.out.println("hash 2: " + instance.hashCode());
                };

                for (int i = 0; i < 10; i++) {
                    //hash 1: 448899632
                    //hash 2: 7952345  -- r2 쓰레드에서 다른 instance 가 생성됨.
                    //hash 1: 448899632
                    //hash 2: 448899632
                    //hash 1: 448899632
                    //hash 2: 448899632
                    new Thread(r1).start();
                    new Thread(r2).start();
                }
    싱글턴 패턴과 멀티스레딩 문제 해결 방법들?
        1. 인스턴스를 돌려주는 정적 메서드 getInstance() 를 synchronized 로 선언한다. (메서드 동기화는 성능을 100배 정도 저하시킨다.)
        2. Lazy instantiation 기법을 사용하지 않고 미리 생성한다.
        3. DCL (Double-Checking Locking) 을 사용하여 getInstance() 안의 동기화 부분을 줄인다.
            public class Singleton {
                private static volatile Singleton instance;

                private Singleton() {}

                public static Singleton getInstance() {
                    if (instance == null) {
                        //클래스 Level 의 동기화 블록
                        synchronized (Singleton.class) {
                            if (instance == null)
                                instance = new Singleton();
                        }
                    }
                    return instance;
                }
            }
            volatile?
                - 쓰레드들에게 CPU 캐쉬가 아닌 MAIN MEMORY 에서 값을 읽어도록 허락한다.
                즉 volatile 로 선언된 변수는 다중 쓰레들에게 사용되는 변수의 값의 변화에 대한 가시성을 보장시킨다.

커맨드 패턴.
    커맨드 패턴은 클라이언트의 요구 사항을 객체로 캡슐화 할 수 있으며, 매개변수를 써서 여러 가지 다른 요구 사항을 집어넣을 수 있다.
    또한 요청 내역을 큐에 저장하거나 로그로 기록할수 도있으며 작업취소 기능도 지원가능 하다.

    Client
        - ConcreteCommand 객체를 생성하고 Receiver 을 설정.
    Receiver
        -  클라이언트의 요구 사항을 수행하기 위해 어떤 일을 처리해야 하는지 알고 있는 객체.
    Command 인터페이스
        - 일련의 행동(Target 의 Method)을 특정 Receiver 와 연결시키므로 요구 사항을 캡슐화한다.
        - execute 메소드는 Receiver 의 특정 작업을 처리하는 지시를 전달.
    ConcreteCommand implements Command
        - 특정 행동과 Receiver 사이를 연결. Invoker 에서 execute() 호출을 통해 요청을 하면 ConcreteCommand 객체에서 Receiver 에 있는 메소드를 호출.
    Invoker
        - Invoker 은 Command 의 execute 메소드를 호출함으로 특정 작업을 수행해달라고 요청.

    메서드 호출 캡슐화.
    Client, Command, Receiver, Invoker 로 구성.
        ex) Client = 손님, Command = 주문서, Receiver = 웨이트리스, Invoker = 주방장

    * Null 객체 Design Pattern.
        - if (object != null) = object 이 null 일때 Null 체크를 하지 않는다면, NullPointException 이 발생한다.
        이럴땐 null 객체를 구현하면, 수시로 널 체크하지 않아도 되며 NullPointException 도 발생하지 않는다.

어댑터 패턴.
    한 클래스의 인터페이스를 클라이언트에서 사용하자고 하는 다른 인터페이스로 변환한다.
    어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스를 연결해서 쓸 수 있다.
        어댑터?  기계·기구 등을 다목적으로 사용하기 위한 보조 기구.
        어댑터 클래스는 두 종류다? 클래스 어댑터, 객체 어댑터. (자바는 다중 상속이 불가능하기에 객체 어댑터만을 지원한다).

퍼사드 패턴
    - 어떤 서브시스템의 일련의 인터페이스에 대한 통합된 (클라이언트가 사용하기 편한) 인터페이스를 제공.
    퍼사드는 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할 수 있다.
        퍼사드 패턴과 어댑터 패턴은 유사하게 보이지만 용도가 차이가 확연히 다르다.

    퍼사드 & 어댑터 & 데코레이터의 차이점.
        데코레이터 - 인터페이스는 바꾸지 않고 책임(기능) 추가.
        어댑터 - 한 인터페이스를 다른 인터페이스로 호환되게 변환.
        퍼사드 - 인터페이스를 간단하게 바꿈.

템플릿 메소드 패턴
    템플릿 메소드 패턴은 메소드에서 알고리즘의 골격 (template) 을 정의한다.
    알고리즘의 공통된 부분은 추상화하여 부모 클래스로 뽑아내고, 알고리즘의 여러 단계 중 달라지는 부분은
    서브클레스에서 구현한다.
    템플릿 메소드를 이용하면 알고리즘의 구조는 그대로 유지하면서 서브클래스에 특정 단계를 재정의할 수 있다.
        알고리즘의 틀(template) - 일련의 단계들로 "알고리즘" 을 정의한 메소드.

        abstract class AbstractClass {
            final void templateMethod() {
                //특정 업무를 처리하는 일련의 알고리즘 정의한다.
                primitiveOperation1(); //서브 클래스에게 알고리즘을 위임한다.
                primitiveOperation2();
                concreteOperation();
                hook() // 필요에 따라 서브클레스에서 오버라이드 할 수 있는 메서드.
                if (hook2()) {
                    primitiveOperation2();
                }
            }

            // 변하지 않는 부분은 부모 클래스에서 정의한다.
            void concreteOperation() {

            };
            //서브 클래스에서 특정 알고리즘을 구현한다.
            abstract void primitiveOperation1();
            abstract void primitiveOperation2();
        }

        *후크 hook - hook 는 추상 클래스에 선언된 메서드로써 기본적인 내용만 구혀되거나 아무 코드도
        들어있지 않는 메서드이다. 서브클래에서는 hook 를 오버라이트 하여 다양한 위치의 hook 에 특정 알고리즘을 넣을 수도 있다. (옵션적인 알고리즘)

    Template Method & Strategy & Factory Method 패턴 차이점.
        템플릿 메소드 - 알고리즘의 일부 단계룰 구현하는 것을 서브클래스에서 처리.
        스트래티지 패턴 - 바꿔 쓸 수 있는 행동을 캡슐화하고 어떤 행동을 사용할지 서브클래스에 위암.
        팩토리 메서드 - 어떤 구상 클래스를 생성할지 서브클래스에 결정.

이터레이터 패턴
    컬렉션 구현 방법을 노출시키지 않고 그 집합체(aggregate) 안에 들어잇는 모든 항목에 접근할 방법을 제공.
    java.util.Iterator
        - hasNext, next, remove
        java.util.ListIterator extends Iterator
            - previous, set, add

컴포지트 패턴
    컴포지트 패턴을 이용하면 객체들을 트리 구조로 구성하여 부분과 전체를 나타내는 계층구조로 만들 수 있다.
    이 패턴을 이용하면 클라이언트에서 개별 객체와 다른 객체들로 구성된 복합 객체를 똑같은 방법으로 다룰 수 있다.
        부분-전체 계층구조(part-whole hierarchy)?
            서로 다른 부분들(component)이 모여있지만, 모든 것을 하나로 묶어서 다룰 수 있는 구조.

    Component - 복합 객체내에 들어있는 모든 객체들에 대한 인터페이스를 정의.
        Leaf - 단일 원소에 대한 행동을 정의.
        Composite - 단일 원소에 대한 행동과 자식이 있는 구성 요소의 행동을 정의. 자식 구성 요소(leaf 혹은 다른 composite) 를 저장하는 역할을 맡는다.


스테이트 패턴
    스테이트 패턴은 객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있다. 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있다.

    Strategy & State 패턴의 차이점.
        Strategy 패턴은 클라이언트에서 Context 객체에게 어떤 전략 객체(Strategy) 사용할 지 직접 지정하지만, 스테이트는 Context 의 내부 상태에 따라 자연스럽게 바뀐다.
        둘 다 상속이 아닌 구성을 통하여 변경을 캡슐화한다. (다시한번 상속의 단점과 구성의 장점을 생각해보자.)


프록시
    RMI? (Remote Method Invocation)
        RMI 을 이용하면 원격 JVM 에 있는 Heap 영역에 있는 객체를 찾아서 메서드를 호출할 수 있다.
        장점
            RMI 을 이용하면 직접 네트워킹 및 입출력 관련 코드를 작성하지 않아도 된다.
            RMI 은 원격의 객체를 찾을때 편리한 룩업 (LOOKUP) 방식을 제공한다.
            RMI 의 보조 객체를 스터브(stub), 서비스 보조 객체는 스켈레톤(skeleton) 이라 부른다.
            자바 5 이후부터는 rmic 명령어를 통해 스터브, 스켈레톤 클래스를 생성하지 않아도 된다.

    원격 메소드 (Remote Method)
        로컬 객체에서 특정 메소드를 호출하면, 로컬에서 요청을 받아 원격 객체에 전달하는 시스팀이라 가정하자.
        클라이언트는 로컬의 보조 객체(client helper) 의 메소드를 호출한다.
        클라이언트 입장에서는 보조 객체가 실제 서비스를 제공한다고 사용하지면, 실제로는 로컬 보조 객체는 그 요청을 원격의 객체로 전달한다.
        로컬 보조 객체는 단지 원격의 서비스 객체인 양 행동(proxy) 하고 내부적으로 서버에 연락을 취하고, 메소드 호출에 대한 정보(method 이름, 인자) 을 전달하고 서버로 부터 리턴된 정보를 기다린다.
        서버 쪽에서는 Socket 연결을 통한 서비스 보조 객체(service helper) 로 부터 요청을 받아오고, 실제 객체의 메소드를 호출한다.
        Client > Client helper(STUB) > send socket (프로토콜을 통한 요청 소켓 전송) > Server Service helper(SKELETON) > Server Service Object

    프록시 패턴의 정의.
        어떤 객체에 대한 접근을 제어(*)하기 위한 용도로 대리인이나 대변인에 해당하는 객체를 제공하는 패턴.
            프록시의 정류
                1. 원격 프록시
                    - 해당 프록시의 메소드를 호출하면 네트워크를 통해서 전달되어 원격 객체의 메소드가 호출.
                2. 가상 프록시.
                    - 생성하는 데 비용이 많은 객체가 필요하기 되기 전까지 해당 객체의 생성을 미루게 해주는 기능을 제공하는 프록시.
                3. 보호 프록시를 써서 접근 권한이 필요한 자원에 대한 접근 제어.

    자바의 동적 프록시 (dynamic proxy)
        - 자바는 런타임시 생성되는 내장 프록시 기능(java.lang.reflect)을 제공한다.
            정적 메서드 Proxy.newProxyInstance() 는 프록시를 생성한다.
            InvocationHandler 은 프록시가 행동할 행위를 구현하는 인터페이스이다.
            (!) 런타임시 생성되는 것은 인스턴스가 아닌 프록시 클래스이다.


Compound 패턴.
    MVC (Model, View and Controller)
        View - 모델을 사용자에게 표현하는 방법을 제공.
        Model - 모든 데이터, 상태 및 어플리케이션의 로직.
        Controller - 사용자의 요청을 해석하고, 모델의 처리 방식을 결정.
            컨트롤러는 모델의 어떤 메소드를 호출해야 할지 결정만 해야 한다. 어플리케이션 로직은 모델에서 담당해야 한다.
            만약 컨트롤러게 어플리케이션 로직이 추가된다면, 재사용한 가능한 모델의 기능은 줄어든다.

        MVC 패턴은 여러 패턴으로 구성된 복합 패턴이다.
            사용된 패턴의 예로는 Strategy, Composite, Observer 패턴 등이 있다.
                Strategy 패턴
                    - 뷰는 사용자의 행동을 처리하고 알맞는 전략 (컨트롤러)을 선택한다. 컨트롤러는 전략을 제공한다.
                Observer 패턴.
                    - 모델을 Observable 로 하여 모델의 상태 변화를 Controller 와 뷰에서 구독할 수 있다. (웹 기반 제외)
                Composite 패턴.
                    - 뷰는 구성요소(Component) 는 (Label, Button, Text, div) 등으로 구성된 Composite 이다. 이들 마지막 요소는 Leaf 노드이다.

디자인 패턴
    - 일련의 반복되는 조건 내에서 발생되는 문제에 대한 (널리 잘 알려진, 혹은 정형화된)해결책이다.








